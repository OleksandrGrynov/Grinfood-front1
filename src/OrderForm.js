import React, { useState, useEffect } from 'react';

const OrderForm = () => {
    const [name, setName] = useState('');
    const [phone, setPhone] = useState('+380');
    const [address, setAddress] = useState('');
    const [paymentMethod, setPaymentMethod] = useState('');
    const [items, setItems] = useState([]);
    const [total, setTotal] = useState(0);
    const [nameError, setNameError] = useState('');
    const [phoneError, setPhoneError] = useState('');
    const [addressError, setAddressError] = useState('');
    const [paymentError, setPaymentError] = useState('');

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—à–∏–∫
    useEffect(() => {
        const storedCart = JSON.parse(localStorage.getItem('cart')) || [];
        const cartWithQuantity = storedCart.map(item => ({ ...item, quantity: item.quantity || 1 }));
        setItems(cartWithQuantity);
    }, []);

    // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    useEffect(() => {
        const newTotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
        setTotal(newTotal);
        localStorage.setItem('cart', JSON.stringify(items));
    }, [items]);

    const updateQuantity = (index, value) => {
        const updatedItems = [...items];
        updatedItems[index].quantity = Math.max(1, parseInt(value) || 1);
        setItems(updatedItems);
    };

    const removeItem = (index) => {
        const updatedItems = items.filter((_, i) => i !== index);
        setItems(updatedItems);
    };

    const handleSubmit = async () => {
        setNameError('');
        setPhoneError('');
        setAddressError('');
        setPaymentError('');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–µ–Ω—ñ (–Ω–µ –º–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏)
        if (!name.trim() || /\d/.test(name)) {
            setNameError('‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è –±–µ–∑ —Ü–∏—Ñ—Ä');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ª–∏—à–µ —á–∏ –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è)
        if (!phone.trim()) {
            setPhoneError('‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏
        if (!address.trim()) {
            setAddressError('‚ùó –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏
        if (!paymentMethod) {
            setPaymentError('‚ùó –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏');
            return;
        }

        const order = {
            customer: { name, phone, address, paymentMethod },
            items,
            total,
        };

        const res = await fetch('http://localhost:5000/api/orders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(order),
        });

        if (res.ok) {
            alert('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
            localStorage.removeItem('cart');
            setItems([]);
            setTotal(0);
        } else {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
        }
    };

    // –ú–∞—Å–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É, –¥–æ–∑–≤–æ–ª—è—î —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è +380
    const handlePhoneChange = (e) => {
        let value = e.target.value.replace(/[^\d+]/g, ''); // –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —ñ '+'

        if (value.startsWith('+380') && value.length <= 13) {
            value = value.replace(/(\+380)(\d{3})(\d{3})(\d{3})/, '+380 $2 $3 $4');
        }

        if (value.length <= 13) {
            setPhone(value);
        }
    };

    const handlePaymentChange = (e) => {
        setPaymentMethod(e.target.value);
    };

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ (—â–æ–± –Ω–µ –≤–≤–æ–¥–∏–ª–∏—Å—å —Ü–∏—Ñ—Ä–∏)
    const handleNameChange = (e) => {
        const value = e.target.value.replace(/[0-9]/g, ''); // –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ü–∏—Ñ—Ä–∏
        setName(value);
    };

    return (
        <div style={{ padding: '20px' }}>
            <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>

            {items.length === 0 ? (
                <p>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí</p>
            ) : (
                <ul style={{ listStyle: 'none', padding: 0 }}>
                    {items.map((item, idx) => (
                        <li key={idx} style={{
                            marginBottom: '15px',
                            padding: '10px',
                            background: '#fff',
                            borderRadius: '10px',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '20px'
                        }}>
                            <img src={item.image} alt={item.name} width="70" height="70" style={{ objectFit: 'cover', borderRadius: '8px' }} />
                            <div style={{ flexGrow: 1 }}>
                                <strong>{item.name}</strong><br />
                                <span>{item.price}‚Ç¥</span>
                            </div>
                            <input
                                type="number"
                                min="1"
                                value={item.quantity}
                                onChange={(e) => updateQuantity(idx, e.target.value)}
                                style={{ width: '60px' }}
                            />
                            <button onClick={() => removeItem(idx)} style={{ color: 'red' }}>‚úñ</button>
                        </li>
                    ))}
                </ul>
            )}

            <p><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</strong> {total}‚Ç¥</p>

            <input
                placeholder="–í–∞—à–µ —ñ–º‚Äô—è"
                value={name}
                onChange={handleNameChange}
            />
            {nameError && <p style={{ color: 'red' }}>{nameError}</p>}

            <input
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                value={phone}
                onChange={handlePhoneChange}
            />
            {phoneError && <p style={{ color: 'red' }}>{phoneError}</p>}

            <input
                placeholder="–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
            />
            {addressError && <p style={{ color: 'red' }}>{addressError}</p>}

            <div>
                <label>
                    <select value={paymentMethod} onChange={handlePaymentChange}>
                        <option value="">–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏</option>
                        <option value="cash">–ì–æ—Ç—ñ–≤–∫–∞</option>
                        <option value="card">–ö–∞—Ä—Ç–∞</option>
                    </select>
                </label>
            </div>
            {paymentError && <p style={{ color: 'red' }}>{paymentError}</p>}

            <button onClick={handleSubmit} disabled={items.length === 0}>
                –ó–∞–º–æ–≤–∏—Ç–∏
            </button>
        </div>
    );
};

export default OrderForm;
