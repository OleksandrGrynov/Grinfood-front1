import React, { useState, useEffect } from 'react';
import {
    getAuth,
    updateProfile,
    reload,
    onAuthStateChanged
} from 'firebase/auth';
import { Link } from 'react-router-dom';
import './styles/ProfilePage.scss';

const ProfilePage = () => {
    const auth = getAuth();
    const [user, setUser] = useState(null);
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [newEmail, setNewEmail] = useState('');
    const [loading, setLoading] = useState(true);
    const [successMessage, setSuccessMessage] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [isEmailVerified, setIsEmailVerified] = useState(false);
    const [isCheckingVerification, setIsCheckingVerification] = useState(false);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            if (firebaseUser) {
                await reload(firebaseUser);
                setUser(firebaseUser);
                setName(firebaseUser.displayName || '');
                setEmail(firebaseUser.email || '');
                setIsEmailVerified(firebaseUser.emailVerified);
            }
            setLoading(false);
        });
        return () => unsubscribe();
    }, [auth]);

    // ‚úÖ –î–û–î–ê–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —è–∫—â–æ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –∑ email-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
    useEffect(() => {
        const searchParams = new URLSearchParams(window.location.search);
        if (searchParams.get('mode') === 'verifyEmail') {
            const checkEmailVerification = async () => {
                const currentUser = auth.currentUser;
                if (currentUser) {
                    await reload(currentUser);
                    setIsEmailVerified(currentUser.emailVerified);
                }
            };
            setTimeout(checkEmailVerification, 2000); // –¥–∞—Ç–∏ Firebase 2—Å
        }
    }, []);

    useEffect(() => {
        setIsCheckingVerification(true);
        let attempts = 0;
        const maxAttempts = 20;

        const interval = setInterval(async () => {
            const currentUser = auth.currentUser;
            if (currentUser) {
                await reload(currentUser);
                const refreshedUser = getAuth().currentUser;
                if (refreshedUser?.emailVerified) {
                    setIsEmailVerified(true);
                    setIsCheckingVerification(false);
                    clearInterval(interval);
                }
            }

            attempts++;
            if (attempts >= maxAttempts) {
                console.warn("‚è± –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å ‚Äî —Ç–∞–π–º–∞—É—Ç.");
                setIsCheckingVerification(false);
                clearInterval(interval);
            }
        }, 3000);

        return () => {
            clearInterval(interval);
            setIsCheckingVerification(false);
        };
    }, [auth]);

    const handleSendVerification = async () => {
        try {
            if (user) {
                const res = await fetch(`${process.env.REACT_APP_API_URL}/send-verification-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: user.email, uid: user.uid })
                });

                const result = await res.json();
                if (!res.ok) throw new Error(result.error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç');

                alert('‚úÖ –õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É.');
            }
        } catch (error) {
            console.error('‚ùå Error sending verification email:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
        }
    };
    const handleDeleteAccount = async () => {
        if (!window.confirm('–í–∏ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) return;

        try {
            const token = await user.getIdToken(true);

            // 1. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ (–±–µ–∫–µ–Ω–¥)
            const res = await fetch(`${process.env.REACT_APP_API_URL}/delete-user`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`
                }
            });

            const result = await res.json();
            if (!res.ok) throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ');

            // 2. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ —É Firebase
            await user.delete();

            // 3. –û—á–∏—Å—Ç–∫–∞ —ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç
            localStorage.clear();
            alert('‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
            window.location.href = '/';

        } catch (error) {
            console.error('‚ùå Error deleting account:', error);

            if (error.code === 'auth/requires-recent-login') {
                alert('‚ö†Ô∏è –£–≤—ñ–π–¥—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç.');
            } else {
                // –º–æ–∂–ª–∏–≤–æ, –∞–∫–∞—É–Ω—Ç —É–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏
                try {
                    await reload(user); // —è–∫—â–æ –≤–∏–¥–∞—Å—Ç—å –ø–æ–º–∏–ª–∫—É ‚Äî –∑–Ω–∞—á–∏—Ç—å, –∞–∫–∞—É–Ω—Ç–∞ –≤–∂–µ –Ω–µ–º–∞
                    alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞.');
                } catch {
                    localStorage.clear();
                    alert('‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç —É–∂–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π. –í–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ.');
                    window.location.href = '/';
                }
            }
        }
    };




    const handleSave = async () => {
        setSuccessMessage('');
        setErrorMessage('');

        if (!user) return;

        const tryUpdateProfile = async () => {
            if (user.displayName !== name && name.trim() !== '') {
                await updateProfile(user, { displayName: name });
            }

            if (newEmail.trim() !== '' && newEmail !== email) {
                const token = await user.getIdToken(true);

                const response = await fetch(`${process.env.REACT_APP_API_URL}/update-email`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${token}`
                    },
                    body: JSON.stringify({ newEmail })
                });

                const contentType = response.headers.get('content-type');
                const isJSON = contentType && contentType.includes('application/json');
                const result = isJSON ? await response.json() : await response.text();

                if (!response.ok) {
                    console.error('‚ùå Backend response:', result);
                    throw new Error(isJSON ? result.error : 'Server error');
                }

                await user.getIdToken(true);
                await reload(user);

                setEmail(user.email || newEmail);
                setNewEmail('');
                setIsEmailVerified(user.emailVerified || false);

                await fetch(`${process.env.REACT_APP_API_URL}/send-verification-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: newEmail, uid: user.uid })
                });

                alert('‚úÖ –õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –ø–æ—à—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            }
        };

        try {
            await tryUpdateProfile();
            setSuccessMessage('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        } catch (error) {
            console.error('‚ùå Error updating profile:', error);
            if (
                error.code === 'auth/user-token-expired' ||
                error.message.includes('token-expired')
            ) {
                try {
                    await user.getIdToken(true);
                    await tryUpdateProfile();
                    setSuccessMessage('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞!');
                } catch (innerError) {
                    setErrorMessage(innerError.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ.');
                }
            } else {
                setErrorMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.');
            }
        }
    };

    if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...</p>;

    return (
        <div className="profile-container">
            <h2>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</h2>

            <label>
                –Ü–º'—è:
                <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
            </label>

            <label>
                –ü–æ—Ç–æ—á–Ω–∏–π Email:
                <div className="email-row">
                    <input type="email" value={email} disabled />
                    {isEmailVerified ? (
                        <span className="verified">‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</span>
                    ) : (
                        <div className="not-verified-wrapper">
                            <button onClick={handleSendVerification} className="not-verified">
                                üî¥ –ù–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
                            </button>
                            {isCheckingVerification && (
                                <span className="checking">‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...</span>
                            )}
                        </div>
                    )}
                </div>
            </label>

            <label>
                –ù–æ–≤–∏–π Email:
                <input
                    type="email"
                    value={newEmail}
                    onChange={(e) => setNewEmail(e.target.value)}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç—É"
                />
            </label>

            <button
                onClick={handleSave}
                className="save-button"
                disabled={!isEmailVerified}
                title={!isEmailVerified ? '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å email, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏' : ''}
            >
                –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            </button>


            {successMessage && <p className="success">{successMessage}</p>}
            {errorMessage && <p className="error">{errorMessage}</p>}

            <Link to="/" className="back-link">‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</Link>
            <button
                onClick={handleDeleteAccount}
                className="delete-button"
                style={{ background: '#c62828', color: 'white', marginTop: '20px' }}
            >
                ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            </button>

        </div>
    );
};

export default ProfilePage;
